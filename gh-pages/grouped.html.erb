<h2>Grouping inputs for one guard</h2>

<p>
  Sometimes it doesn't make sense to guard just a single field.  For
  example, maybe you have a form that allows a user to enter their
  preferred method of contact, which can be an email address or phone
  number.  You could use the <code>oneRequired</code> guard to ensure
  the user provides at least one.  Or perhaps you have some unique
  values that the user must distribute amongst several inputs.  You
  could use the <code>different</code> guard to ensure no input has
  the same value.  Related to the <code>different</code> guard is
  the <code>same</code> guard, which requires all inputs have the same
  value.
</p>

<div class="example">
  <div class="display">
    <script>
      $.guard(".phone").using("phoneUS");
      $.guard(".email").using("email");
      $.guard(".email,.phone").using("oneRequired");
      $.guard(".color").using("different");
      $.liveGuard("#form1");
    </script>

    <form id="form1">
      <h2>Enter at least an email or phone number:</h2>

      <p>
        <label for="email">Email Address:</label><br />
        <input type="text" id="email" class="required email" name="email" /><br />
        <small>example: john@email.com</small>
      </p>

      <p>
        <label for="phone">Phone Number:</label><br />
        <input type="text" id="phone" class="required phone" name="phone" /><br />
        <small>example: (555) 555-1234</small>
      </p>

      <h2>Distribute the colors evenly:</h2>

      <p>
        <select name="color1" class="color">
          <option value="red">Red</option>
          <option value="green">Green</option>
          <option value="blue">Blue</option>
        </select>
      </p>

      <p>
        <select name="color2" class="color">
          <option value="red">Red</option>
          <option value="green">Green</option>
          <option value="blue">Blue</option>
        </select>
      </p>

      <p>
        <select name="color3" class="color">
          <option value="red">Red</option>
          <option value="green">Green</option>
          <option value="blue">Blue</option>
        </select>
      </p>

      <p><input type="submit" /></p>
    </form>
  </div>
</div>

<h2>Custom grouped guards</h2>

<p>
  Like normal guards, grouped guards can be customized with an
  arbitrary function.  Instead of accepting a single value and
  element, custom grouped guard functions accept an array of values
  and elements, corresponding to all elements being guarded.  The
  function will be called once when the form is guarded.  The form
  below demonstrates a custom grouped guard.
</p>

<div class="example">
  <div class="display">
    <script>
      $.guard("input[type='text']").grouped().using(function(values, elements) {
        if ($.inArray("foo", values) >= 0) {
          // If "foo" is provided, "bar" must also be provided.
          return $.inArray("bar", values) >= 0;
        }

        return true;
      }).message("Include 'bar' if 'foo' is provided!");
      $.liveGuard("#form2");
    </script>

    <form id="form1">
      <h2>Provide 'bar' if 'foo' is provided:</h2>

      <p><input type="text" name="inputs[]" /></p>
      <p><input type="text" name="inputs[]" /></p>
      <p><input type="submit" /></p>
    </form>
  </div>
</div>
