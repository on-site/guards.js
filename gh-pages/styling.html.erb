<h2>How to style guards</h2>

<p>
  After you have your forms guarded properly, the next step is to
  style the error messages and invalid fields.  This is made easier
  with classes added to the relevant fields.  An error message for a
  field that has a guard error will (by default) have the
  class <code>error-message</code>.  The field that triggered the
  guard error will (by default) have the
  class <code>invalid-field</code>.  Below is an example of how these
  classes can be used to style the guarded fields.
</p>

<div class="example">
  <div class="display">
    <style>
      #css-styled .invalid-field { background-color: #ffbbbb; }
      #css-styled .error-message { color: #ff0000; }
    </style>

    <script>
      $(function() {
        $.guard("#css-styled input").using("required").triggerError();
        $.liveGuard("#css-styled");
      });
    </script>

    <form id="css-styled">
      <input type="text" name="field1" />
    </form>
  </div>
</div>

<h2>Programmatic styling</h2>

<p>
  If you don't wish to do your styling via inline or external file css
  declarations, guards has you covered!  You can add styling to your
  page via the <code>style</code> method.  This method merely appends
  a <code>style</code> block into your document which adds some
  default (or configurable) styles for elements with errors and the
  related error messages.  This programmatic styling can also be
  scoped to specific css selectors, to ensure it is targeted to just a
  specific section of your page, if you so wish.  See below for an
  example of programmatic styling.
</p>

<div class="example">
  <div class="display">
    <script>
      $(function() {
        $.style("#js-styled");
        $.guard("#js-styled input").using("required").triggerError();
        $.liveGuard("#js-styled");
      });
    </script>

    <form id="js-styled">
      <input type="text" name="field1" />
    </form>
  </div>
</div>
