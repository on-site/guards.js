<h2>Changing the error message</h2>

<p>
  All aspects of the error message can be changed, including the
  content of the message, where it is placed, what type of tag it is,
  and what class it uses (even what class is attached to the field
  that had an error).  Try out the next form to see how the various
  aspects are changed.
</p>

<div class="example">
  <div class="display">
    <script>
      $.guard("#form1 input[name='input1']").using("required").message("ERROR'D!!!");
      $.guard("#form1 input[name='input2']").using("required").tag("p").messageClass("green");
      $.guard("#form1 input[name='input3']").using("required").invalidClass("invalid-blue");
      $.guard("#form1 input[name='input4']").using("required").target("#form1 .errors").message("Moved message.");
      $.liveGuard("#form1");
    </script>

    <style>
      p.green { color: #006600; }
      .invalid-blue { background-color: #6666ff; }
    </style>

    <form id="form1">
      <p><input type="text" name="input1" /></p>
      <p><input type="text" name="input2" /></p>
      <p><input type="text" name="input3" /></p>
      <p><input type="text" name="input4" /></p>
      <p><input type="submit" /></p>
      <p class="errors"></p>
    </form>
  </div>
</div>

<p>
  Notice from the example that multiple adjustments to the errors can
  be chained.  Methods that modify a guard can all be chained
  together, much like jQuery methods.
</p>

<h2>Custom guard</h2>

<p>
  The built in guards are not the only guards available.  Custom
  validation functions can be used in place of a built in guard by
  passing a function instead of a string to the <code>using</code>
  method.  The following form demonstrates custom guard validation.
</p>

<div class="example">
  <div class="display">
    <script>
      $.guard("#regexp").using(function(value, element) {
        // Parse exception causes guard to fail
        return new RegExp(value);
      }).message("Invalid regular expression.");

      $.guard("#string").using(function(value, element) {
        var regexp = new RegExp($("#regexp").val());
        return regexp.test(value);
      }).message("Regular expression does not match.");

      $.liveGuard("#form2");
    </script>

    <form id="form2">
      <p>
        <label for="regexp">Regular Expression:</label><br />
        <input type="text" id="regexp" name="regexp" value="\d{1,2}-\d{1,2}-\d{4}" />
      </p>

      <p>
        <label for="string">Test String:</label><br />
        <input type="text" id="string" name="string" value="4/2/1942" />
      </p>

      <p><input type="submit" /></p>
    </form>
  </div>
</div>

<h2>Separate guards instances and defaults</h2>

<p>
  Defaults for how guards.js behaves are available in
  the <code>$.guards.defaults</code> object.  If you would like guards
  to have default behavior that differs between two different forms,
  one option is to create a separate <code>$.Guards</code> instance
  and change the defaults.  The 2 forms below demonstrate this.
</p>

<div class="example">
  <div class="display">
    <script>
      var g1 = new $.Guards();
      g1.defaults.invalidClass = "g1-invalid";
      g1.defaults.messageClass = "g1-error";
      g1.add("#form3 input[type='text']").using("required");
      g1.liveGuard("#form3");

      var g2 = new $.Guards();
      g2.defaults.invalidClass = "g2-invalid";
      g2.defaults.messageClass = "g2-error";
      g2.add("#form4 input[type='text']").using("required");
      g2.liveGuard("#form4");
    </script>

    <style>
      .g1-invalid { background-color: #66ff66; }
      .g1-error { color: #006600; margin-left: 10px; }

      .g2-invalid { background-color: #6666ff; }
      .g2-error { color: #000066; margin-left: 10px; }
    </style>

    <form id="form3">
      <p><input type="text" name="input1" /></p>
      <p><input type="text" name="input2" /></p>
      <p><input type="submit" /></p>
    </form>

    <form id="form4">
      <p><input type="text" name="input1" /></p>
      <p><input type="text" name="input2" /></p>
      <p><input type="submit" /></p>
    </form>
  </div>
</div>

<h2>Stacked errors</h2>

<p>
  Errors in guards.js are displayed one at a time.  The first guard to
  detect an error is displayed before the next is considered.  This
  behavior can be changed by enabling stacked errors.  To enabled
  stacked errors, set <code>$.guards.options.stackErrors</code> to
  true.  With stacked errors enabled, all errors will be displayed
  rather than simply the first one.  Below demonstrates two forms, one
  with stacked errors, one without.
</p>

<div class="example">
  <div class="display">
    <script>
      function startsWithA(value) { return /^(a|A)/.test(value); };
      function endsWithB(value) { return /(b|B)$/.test(value); };

      var withoutStacked = new $.Guards();
      var withStacked = new $.Guards();
      withStacked.options.stackErrors = true;

      withoutStacked.add("#form5 input[type='text']").using(startsWithA).message("Please start with A");
      withoutStacked.add("#form5 input[type='text']").using(endsWithB).message("Please end with B");
      withoutStacked.liveGuard("#form5");

      withStacked.add("#form6 input[type='text']").using(startsWithA).message("Please start with A");
      withStacked.add("#form6 input[type='text']").using(endsWithB).message("Please end with B");
      withStacked.liveGuard("#form6");
    </script>

    <form id="form5">
      <h3>Without stacked errors</h3>
      <p><input type="text" name="input1" /></p>
      <p><input type="submit" /></p>
    </form>

    <form id="form6">
      <h3>With stacked errors</h3>
      <p><input type="text" name="input1" /></p>
      <p><input type="submit" /></p>
    </form>
  </div>
</div>
